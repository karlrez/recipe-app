{"ast":null,"code":"var _jsxFileName = \"/home/karl/vscode/recipe-app/src/Components/Posts/Posts.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../store/actions/index\";\nimport LikeIcon from \"../../assets/icons/like.png\";\nimport LikeBlueIcon from \"../../assets/icons/likeBlue.png\";\nimport CommentIcon from \"../../assets/icons/comment.png\";\nimport classes from \"./Posts.module.css\";\nimport { NavLink } from \"react-router-dom\";\n\nclass Posts extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.likeHandleClick = (event, recipeId) => {\n      event.preventDefault(); // Sometimes recipeId is undefined\n\n      if (!recipeId) {\n        return;\n      }\n\n      console.log(`recipe id: ${recipeId}`);\n      this.props.likeRecipe(this.props.token, recipeId); // outer component will make api call to get updated recipes\n\n      this.props.onLikeBtnClick();\n    };\n\n    this.commentHandleClick = (event, recipeId) => {\n      event.preventDefault();\n      alert(\"Comment feature coming soon!\");\n    };\n\n    this.checkLikedPost = post => {\n      for (let i = 0; i < post.likes.length; i++) {\n        if (this.props.username === post.likes[i]) {\n          return true;\n        }\n      }\n    };\n\n    this.createLikeButton = post => {\n      let likeButton;\n\n      if (!this.checkLikedPost(post)) {\n        likeButton = /*#__PURE__*/React.createElement(\"img\", {\n          src: LikeIcon,\n          alt: \"LikeIcon\",\n          value: post.id,\n          onClick: e => this.likeHandleClick(e, post.id),\n          className: classes.LikeIcon,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 9\n          }\n        });\n      } else {\n        likeButton = /*#__PURE__*/React.createElement(\"img\", {\n          src: LikeBlueIcon,\n          alt: \"Blue Like Icon\",\n          value: post.id,\n          onClick: e => this.likeHandleClick(e, post.id),\n          className: classes.LikeIcon,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 9\n          }\n        });\n      }\n\n      return likeButton;\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.token && !this.props.username) {\n      this.props.getProfileInfo(this.props.token);\n    }\n  }\n\n  render() {\n    let recipes;\n\n    switch (this.props.postType) {\n      case \"homeRecipes\":\n        recipes = this.props.homeRecipes;\n        break;\n\n      case \"searchRecipes\":\n        recipes = this.props.searchRecipes;\n        break;\n\n      case \"popularRecipes\":\n        recipes = this.props.popularRecipes;\n        break;\n\n      case \"profileRecipes\":\n        recipes = this.props.profileRecipes;\n        break;\n\n      case \"otherProfileRecipes\":\n        recipes = this.props.otherProfileRecipes;\n        break;\n\n      default:\n        break;\n    }\n\n    let posts; //console.log(\"recipe length: \" + recipes.length);\n    //console.log(JSON.stringify(recipes));\n\n    if (recipes && recipes.length !== 0) {\n      posts = recipes.results.map(post => /*#__PURE__*/React.createElement(\"div\", {\n        key: post.id,\n        className: classes.Posts,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(NavLink, {\n        to: `/user/${post.user}`,\n        className: classes.userLink,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }\n      }, post.user), /*#__PURE__*/React.createElement(NavLink, {\n        to: `post-detail/${post.id}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: post.image,\n        alt: \"recipe\",\n        className: classes.Images,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.nameAndIconDiv,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.recipeNameDiv,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(NavLink, {\n        to: `post-detail/${post.id}`,\n        className: classes.recipeNameText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 15\n        }\n      }, post.name[0].toUpperCase() + post.name.substr(1, post.name.length)), /*#__PURE__*/React.createElement(\"span\", {\n        className: classes.Date,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 17\n        }\n      }), \"-Posted \", post.date.substr(0, 10))), /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.iconDiv,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        value: post.id,\n        className: classes.LikeButton,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 15\n        }\n      }, this.createLikeButton(post), \"\\xA0\", post.likes.length), /*#__PURE__*/React.createElement(\"button\", {\n        className: classes.LikeButton,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: CommentIcon,\n        className: classes.LikeIcon,\n        alt: \"comment icon\",\n        value: post.id,\n        onClick: e => this.commentHandleClick(e, post.id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 17\n        }\n      }), \"\\xA00\")))));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 12\n      }\n    }, posts);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.auth.token,\n    selectedPage: state.navbar.selectedPage,\n    homeRecipes: state.homeRecipes.recipes,\n    searchRecipes: state.searchRecipes.recipes,\n    popularRecipes: state.popularRecipes.recipes,\n    profileRecipes: state.profileRecipes.recipes,\n    otherProfileRecipes: state.otherProfileRecipes.recipes,\n    error: state.likeRecipe.error,\n    loading: state.likeRecipe.loading,\n    username: state.profileInfo.username\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    likeRecipe: (token, recipeId) => dispatch(actions.likeRecipe(token, recipeId)),\n    getProfileInfo: token => dispatch(actions.profileInfo(token))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Posts);","map":{"version":3,"sources":["/home/karl/vscode/recipe-app/src/Components/Posts/Posts.js"],"names":["React","Component","connect","actions","LikeIcon","LikeBlueIcon","CommentIcon","classes","NavLink","Posts","likeHandleClick","event","recipeId","preventDefault","console","log","props","likeRecipe","token","onLikeBtnClick","commentHandleClick","alert","checkLikedPost","post","i","likes","length","username","createLikeButton","likeButton","id","e","componentDidMount","getProfileInfo","render","recipes","postType","homeRecipes","searchRecipes","popularRecipes","profileRecipes","otherProfileRecipes","posts","results","map","user","userLink","image","Images","nameAndIconDiv","recipeNameDiv","recipeNameText","name","toUpperCase","substr","Date","date","iconDiv","LikeButton","mapStateToProps","state","auth","selectedPage","navbar","error","loading","profileInfo","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../store/actions/index\";\nimport LikeIcon from \"../../assets/icons/like.png\";\nimport LikeBlueIcon from \"../../assets/icons/likeBlue.png\";\nimport CommentIcon from \"../../assets/icons/comment.png\";\nimport classes from \"./Posts.module.css\";\nimport { NavLink } from \"react-router-dom\";\n\nclass Posts extends Component {\n\n  componentDidMount() {\n    if (this.props.token && !this.props.username) {\n      this.props.getProfileInfo(this.props.token);\n    }\n  }\n\n  likeHandleClick = (event, recipeId) => {\n    event.preventDefault();\n\n    // Sometimes recipeId is undefined\n    if (!recipeId) {\n      return;\n    }\n    console.log(`recipe id: ${recipeId}`);\n\n    this.props.likeRecipe(this.props.token, recipeId);\n    // outer component will make api call to get updated recipes\n    this.props.onLikeBtnClick();\n  };\n\n  commentHandleClick = (event, recipeId) => {\n    event.preventDefault();\n    alert(\"Comment feature coming soon!\");\n  };\n\n  // Iterates thru likes array in recipe to see if post was already liked by user\n  checkLikedPost = (post) => {\n    for (let i = 0; i < post.likes.length; i++) {\n      if (this.props.username === post.likes[i]) {\n        return true;\n      }\n    }\n  };\n\n  // Return either blue or black like button based on if post was already liked\n  createLikeButton = (post) => {\n    let likeButton;\n\n    if (!this.checkLikedPost(post)) {\n      likeButton = (\n        <img\n          src={LikeIcon}\n          alt=\"LikeIcon\"\n          value={post.id}\n          onClick={(e) => this.likeHandleClick(e, post.id)}\n          className={classes.LikeIcon}\n        ></img>\n      );\n    } else {\n      likeButton = (\n        <img\n          src={LikeBlueIcon}\n          alt=\"Blue Like Icon\"\n          value={post.id}\n          onClick={(e) => this.likeHandleClick(e, post.id)}\n          className={classes.LikeIcon}\n        ></img>\n      );\n    }\n\n    return likeButton;\n  };\n\n  render() {\n    let recipes;\n    switch (this.props.postType) {\n      case \"homeRecipes\":\n        recipes = this.props.homeRecipes;\n        break;\n      case \"searchRecipes\":\n        recipes = this.props.searchRecipes;\n        break;\n      case \"popularRecipes\":\n        recipes = this.props.popularRecipes;\n        break;\n      case \"profileRecipes\":\n        recipes = this.props.profileRecipes;\n        break;\n      case \"otherProfileRecipes\":\n        recipes = this.props.otherProfileRecipes;\n        break;\n      default:\n        break;\n    }\n\n    let posts;\n    //console.log(\"recipe length: \" + recipes.length);\n    //console.log(JSON.stringify(recipes));\n    if (recipes && recipes.length !== 0) {\n      posts = recipes.results.map((post) => (\n        <div key={post.id} className={classes.Posts}>\n          <NavLink to={`/user/${post.user}`} className={classes.userLink}>\n            {post.user}\n          </NavLink>\n          <NavLink to={`post-detail/${post.id}`}>\n            <img src={post.image} alt=\"recipe\" className={classes.Images} />\n          </NavLink>\n          <div className={classes.nameAndIconDiv}>\n            <div className={classes.recipeNameDiv}>\n              <NavLink\n                to={`post-detail/${post.id}`}\n                className={classes.recipeNameText}\n              >\n                {post.name[0].toUpperCase() +\n                  post.name.substr(1, post.name.length)}\n              </NavLink>\n              <span className={classes.Date}>\n                <br />\n                -Posted {post.date.substr(0, 10)}\n              </span>\n            </div>\n            <div className={classes.iconDiv}>\n              <button value={post.id} className={classes.LikeButton}>\n                {this.createLikeButton(post)}\n                &nbsp;{post.likes.length}\n              </button>\n              <button className={classes.LikeButton}>\n                <img\n                  src={CommentIcon}\n                  className={classes.LikeIcon}\n                  alt=\"comment icon\"\n                  value={post.id}\n                  onClick={(e) => this.commentHandleClick(e, post.id)}\n                />\n                &nbsp;0\n              </button>\n            </div>\n          </div>\n        </div>\n      ));\n    }\n\n    return <div>{posts}</div>;\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    token: state.auth.token,\n    selectedPage: state.navbar.selectedPage,\n    homeRecipes: state.homeRecipes.recipes,\n    searchRecipes: state.searchRecipes.recipes,\n    popularRecipes: state.popularRecipes.recipes,\n    profileRecipes: state.profileRecipes.recipes,\n    otherProfileRecipes: state.otherProfileRecipes.recipes,\n\n    error: state.likeRecipe.error,\n    loading: state.likeRecipe.loading,\n\n    username: state.profileInfo.username,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    likeRecipe: (token, recipeId) =>\n      dispatch(actions.likeRecipe(token, recipeId)),\n      getProfileInfo: (token) => dispatch(actions.profileInfo(token)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Posts);\n"]},"metadata":{},"sourceType":"module"}