{"ast":null,"code":"import axios from '../../axios';\nimport * as actionTypes from './actionTypes';\nexport const auth = (email, password) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      email: email,\n      password: password\n    };\n    axios.post('/user/token', authData).then(response => {\n      console.log(response);\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000); // should be 1 hour in milliseconds\n\n      localStorage.setItem('token', response.data.token);\n      localStorage.setItem('expirationDate', expirationDate);\n      dispatch(authSuccess(response.data.token));\n      dispatch(checkAuthTimeout(3600));\n    }).catch(err => {\n      dispatch(authFail(err.response.responseText));\n    });\n  };\n};\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = token => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('expirationDate');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n}; // setTimeout expects milliseconds, so 3600 * 1000 is an hour\n\nexport const checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\nexport const setAuthRedirectPath = path => {\n  return {\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\n    path: path\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        dispatch(authSuccess(token));\n        dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/home/karl/vscode/recipe-app/src/store/actions/auth.js"],"names":["axios","actionTypes","auth","email","password","dispatch","authStart","authData","post","then","response","console","log","expirationDate","Date","getTime","localStorage","setItem","data","token","authSuccess","checkAuthTimeout","catch","err","authFail","responseText","type","AUTH_START","AUTH_SUCCESS","error","AUTH_FAIL","logout","removeItem","AUTH_LOGOUT","expirationTime","setTimeout","setAuthRedirectPath","path","SET_AUTH_REDIRECT_PATH","authCheckState","getItem"],"mappings":"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","sourcesContent":["import axios from '../../axios';\nimport * as actionTypes from './actionTypes';\n\n\nexport const auth = (email, password) => {\n    return dispatch => {\n        dispatch(authStart());\n        const authData = {\n            email: email,\n            password: password\n        };\n\n        axios.post('/user/token', authData)\n            .then(response => {\n                console.log(response);\n                const expirationDate = new Date(new Date().getTime() + 3600 * 1000); // should be 1 hour in milliseconds\n                localStorage.setItem('token', response.data.token);\n                localStorage.setItem('expirationDate', expirationDate);\n                dispatch(authSuccess(response.data.token));\n                dispatch(checkAuthTimeout(3600));\n            })\n            .catch(err => {\n                dispatch(authFail(err.response.responseText));\n            });\n    };\n};\n\nexport const authStart = () => {\n    return {\n        type: actionTypes.AUTH_START\n    };\n};\n\nexport const authSuccess = (token) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        token: token,\n    };\n};\n\nexport const authFail = (error) => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n        error: error\n    };\n};\n\nexport const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('expirationDate');\n    return {\n        type: actionTypes.AUTH_LOGOUT\n    };\n};\n\n// setTimeout expects milliseconds, so 3600 * 1000 is an hour\nexport const checkAuthTimeout = (expirationTime) => {\n    return dispatch => {\n        setTimeout(() => {\n            dispatch(logout());\n        }, expirationTime * 1000);\n    };\n};\n\nexport const setAuthRedirectPath = (path) => {\n    return {\n        type: actionTypes.SET_AUTH_REDIRECT_PATH,\n        path: path\n    };\n};\n\nexport const authCheckState = () => {\n    return dispatch => {\n        const token = localStorage.getItem('token');\n        if (!token) {\n            dispatch(logout());\n        } else {\n            const expirationDate = new Date(localStorage.getItem('expirationDate'));\n            if (expirationDate <= new Date()) {\n                dispatch(logout());\n            } else {\n                dispatch(authSuccess(token));\n                dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000 ));\n            }   \n        }\n    };\n};"]},"metadata":{},"sourceType":"module"}